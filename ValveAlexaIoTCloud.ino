/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/c67bd81f-3c9e-4b3c-8a93-8008d926f403 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudSwitch onValve1;
  CloudSwitch onValve2;
  CloudSwitch onBothValve;
  String msg;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ESP8266WebServer.h>
#include <EEPROM.h>

#include "thingProperties.h"


ESP8266WebServer *serverHtml;//server for normal opertion webpage


typedef enum {
  eValveIdea,
  eValveOn,
  eValveOff,
}EnumValves;
EnumValves StartLower,StartUpper,nullValve;

void ValveUpperChanged(bool OpenClose);
void ValveLowerChanged(bool OpenClose);
void HandleMotorSensor(EnumValves *valve, uint8_t motorP, uint8_t motorN, uint8_t volveOn, uint8_t volveOff, unsigned int cmdStartTime,String valveName );
void ButoonPressedForConfigPage(int cnt);
void LedIndication(int flashCnt);

volatile int LowerValveState = -1;
volatile int UpperValveState = -1;
volatile int LowerPercent = -1;
volatile int UpperPercent = -1;

unsigned int LowerTimer;
unsigned int UpperTimer;


#define MOTOR1P 5 //D1 GPIO Motor1 +ve
#define MOTOR1N 4 //D2 GPIO Motor1 -ve
#define MOTOR2P 0 //D3 GPIO Motor2 +ve
#define MOTOR2N 15 //D8 GPIO Motor2 -ve

#define MOTORLOW LOW
#define MOTORHIGH HIGH

#define VALVE1ON  16 //D0 Valve1 On sensor 
#define VALVE1OFF 14 //D5 Valve1 Off sensor
#define VALVE2ON  12 //D6 Valve2 On sensor  
#define VALVE2OFF 13 //D7 Valve2 Off sensor 

//#define LED_BUILTIN   2 //D4 inbuild LED 


#define VALVEO_OPERATION_TIME 100000L

bool wifiConnected = false;
int skipfirstcallAfterConnect = false;
#define NUMBER_OF_CALLS_TO_SKIP 3
#define SKIP_CALL_AFTER_JUST_CONNECTED if(skipfirstcallAfterConnect<NUMBER_OF_CALLS_TO_SKIP){Serial.print("Skipping call for: ");Serial.println(__func__);skipfirstcallAfterConnect++;return;}

void setupWifi();
int ValveState(int pinOn, int pinOff);
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  /*GPIO Config*/
  pinMode(MOTOR1P,OUTPUT);
  pinMode(MOTOR1N,OUTPUT);
  pinMode(MOTOR2P,OUTPUT);
  pinMode(MOTOR2N,OUTPUT);
  
  pinMode(VALVE1ON ,INPUT);
  pinMode(VALVE1OFF,INPUT);
  pinMode(VALVE2ON ,INPUT);
  pinMode(VALVE2OFF,INPUT);

  pinMode(LED_BUILTIN, OUTPUT);
  
  LowerPercent = ValveState(VALVE1ON,VALVE1OFF);
  UpperPercent = ValveState(VALVE2ON,VALVE2OFF);
  LowerValveState = LowerPercent==100?1:(LowerPercent==0)?0:-1;
  UpperValveState = UpperPercent==100?1:(UpperPercent==0)?0:-1;
  if(LowerValveState!=-1) onValve2 = bool(LowerValveState);
  if(UpperValveState!=-1) onValve2 = bool(UpperValveState);
  onBothValve = onValve1 == true && onValve2 == true;
  
  // Initialise wifi connection
  setupWifi();
  RegisterWebPage();
#define USE_ARDINO_IOT
#ifdef USE_ARDINO_IOT
  // Defined in thingProperties.h
  initProperties();
  extern String esid;
  extern String epass;
  ArduinoIoTPreferredConnection = new WiFiConnectionHandler(esid.c_str(), epass.c_str());
  
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(*ArduinoIoTPreferredConnection);
  
  /*https://create.arduino.cc/iot/things/c67bd81f-3c9e-4b3c-8a93-8008d926f403
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(DBG_INFO);
  ArduinoCloud.printDebugInfo();
#endif
}

void loop() {
  #ifdef USE_ARDINO_IOT
  ArduinoCloud.update();
  // Your code here 
  #endif
  if(!ArduinoCloud.connected())
  {
    if(skipfirstcallAfterConnect) Serial.println("ArduinoCloud dissconnected");
    skipfirstcallAfterConnect = 0;
    if ((WiFi.status() == WL_CONNECTED))
      LedIndicationWithArduinoIoT(5); 
     else
      LedIndicationWithArduinoIoT(3); 
  
  }
  ButoonPressedForConfigPage(10);
 
  // Last behaviour
  if ((WiFi.status() == WL_CONNECTED))
  {
    serverHtml->handleClient();
    LedIndicationWithArduinoIoT(1);
    SendIpDaily();
  }
  
  HandleMotorSensor(&StartLower, MOTOR1P, MOTOR1N, VALVE1ON, VALVE1OFF, LowerTimer, "Lower");
  HandleMotorSensor(&StartUpper, MOTOR2P, MOTOR2N, VALVE2ON, VALVE2OFF, UpperTimer, "Upper");

  
}

void PrintValveStatus(String funName,String cust="NULL")
{
  Serial.print(funName);Serial.print(" : ");
  Serial.print(cust);Serial.print(" : ");
  Serial.print(onValve1);Serial.print(" : ");
  Serial.print(onValve2);Serial.print(" : ");
  Serial.print(onBothValve);Serial.println(" : ");
}

void onOnValve1Change() {
  SKIP_CALL_AFTER_JUST_CONNECTED
  // Do something
 PrintValveStatus(__func__,"Bef");
  
 if(onValve1 == false && onValve2 == false)
  onValve2= true;
 
 onBothValve = onValve1 == true && onValve2 == true; 
 CmdOperateValve(onValve1, "Upper");
 CmdOperateValve(onValve2, "Lower");
 PrintValveStatus(__func__,"aft");
}

void onOnValve2Change() {
  SKIP_CALL_AFTER_JUST_CONNECTED
  // Do something
  PrintValveStatus(__func__,"Bef");
  
 if(onValve1 == false && onValve2 == false)
  onValve1=true; 
  
 onBothValve = onValve1 == true && onValve2 == true;
 CmdOperateValve(onValve1, "Upper");
 CmdOperateValve(onValve2, "Lower");
 PrintValveStatus(__func__,"aft");
}

void onOnBothValveChange() {
  SKIP_CALL_AFTER_JUST_CONNECTED
  // Do something
 PrintValveStatus(__func__,"Bef");
 if(onBothValve)
 {
   onValve1 =true;
   onValve2 =true;
 }
 else
 {
  onBothValve =true;
  Serial.println("Not Allowed");
 }
  CmdOperateValve(onValve1, "Upper");
  CmdOperateValve(onValve2, "Lower");

 PrintValveStatus(__func__,"aft");
}


void onMsgChange() {
  // Do something
  static int cnt =0;
  Serial.println("Msg:" + msg);
  if(msg == "IP")
  {
    msg = "Local IP : " + WiFi.localIP().toString();
  }
  if(cnt == 0)
    msg = "Just Boot up: Local IP : " + WiFi.localIP().toString();
  else
    msg = "Msg:"+String(cnt)+": "+ msg;

  cnt = cnt +1;
}

void SendIpDaily()
{
  int days = millis()/(1000*60*60*24);
  static int lastDateToUpdateIp=0;
  if(lastDateToUpdateIp!=days) {
    lastDateToUpdateIp=days;
    msg = "Runing since " + String(days) + " days : Local IP : " + WiFi.localIP().toString();
    }
}
